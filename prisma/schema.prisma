// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String       @id @default(uuid())
  firstName             String
  lastName              String
  email                 String       @unique
  username              String       @unique
  password              String
  actualRole            String
  actualRoleDescription String
  birthday              DateTime
  phone                 String
  about                 String
  linkedin              String
  github                String
  photoUrl              String?
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  projects              Project[]
  competences           Competence[]
  experiences           Experience[]
  feedbacks             Feedback[]
  isActive              Boolean

  @@map("users")
}

model Project {
  id            String   @id @default(uuid())
  title         String
  description   String
  repository    String
  productionUrl String
  imageUrl      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
  userId        String

  @@map("projects")
}

model Competence {
  id             String   @id @default(uuid())
  name           String
  level          String
  recomendations Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
  userId         String

  @@map("competences")
}

model Experience {
  id          String    @id @default(uuid())
  role        String
  description String
  company     String
  actualRole  Boolean
  initialDate DateTime
  finalDate   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  userId      String

  @@map("experiences")
}

model Feedback {
  id        String   @id @default(uuid())
  name      String
  role      String
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@map("feedbacks")
}
